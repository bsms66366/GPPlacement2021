import sql, { SQLQuery, isSqlQuery } from '@databases/sql/web';
import * as ws from './websql-types';
export type { SQLQuery };
export { sql, isSqlQuery };
export declare class QueryTask {
    protected readonly _isQueryTask = true;
}
export declare class Transaction {
    private readonly _handler;
    constructor(handler: (task: QueryTask, query: SQLQuery) => void);
    query(query: SQLQuery): QueryTask;
}
export default class Database {
    private readonly _db;
    constructor(db: Promise<ws.Database>);
    tx<TResult>(fn: (tx: Transaction) => Iterator<QueryTask, TResult, any[]>, options?: {
        readOnly: boolean;
    }): Promise<TResult>;
    query(query: SQLQuery, options?: {
        readOnly: boolean;
    }): Promise<any[]>;
}
